Index: controllers/followController.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controllers\n\nimport (\n\t\"ByteRhythm/models\"\n\tbeego \"github.com/beego/beego/v2/server/web\"\n)\n\n// FollowController operations for Follow\ntype FollowController struct {\n\tbeego.Controller\n}\n\nfunc (c *FollowController) ActionRelation() {\n\t//token := c.GetString(\"token\")\n\ttoUserId, _ := c.GetInt(\"to_user_id\")\n\tactionType, _ := c.GetInt(\"action_type\")\n\t// todo 用token中解析得到id\n\tfromUserId := 1\n\n\tresp := make(map[string]interface{})\n\tif actionType == 1 {\n\t\t// 关注\n\t\t_, err := models.AddFollow(fromUserId, toUserId)\n\t\tif err == nil {\n\t\t\tresp[\"status_code\"] = 0\n\t\t\tresp[\"status_msg\"] = \"关注成功\"\n\t\t\t_ = c.JSONResp(resp)\n\t\t\treturn\n\t\t}\n\t\tresp[\"status_code\"] = 1\n\t\tresp[\"status_msg\"] = err.Error()\n\t\t_ = c.JSONResp(resp)\n\t\treturn\n\n\t} else if actionType == 2 {\n\t\t// 取消关注\n\t\terr := models.CancelFollow(fromUserId, toUserId)\n\t\tif err == nil {\n\t\t\tresp[\"status_code\"] = 0\n\t\t\tresp[\"status_msg\"] = \"取消关注成功\"\n\t\t\t_ = c.JSONResp(resp)\n\t\t\treturn\n\t\t}\n\n\t\tresp[\"status_code\"] = 1\n\t\tresp[\"status_msg\"] = err.Error()\n\t\t_ = c.JSONResp(resp)\n\t\treturn\n\t}\n\n\tresp[\"status_code\"] = 1\n\tresp[\"status_msg\"] = \"检查参数信息\"\n\tc.Data[\"json\"] = resp\n\t_ = c.ServeJSON()\n\treturn\n}\n\nfunc (c *FollowController) ListFollowRelation() {\n\t//token := c.GetString(\"token\")\n\tresp := make(map[string]interface{})\n\tuserId, _ := c.GetInt(\"user_id\")\n\tfollowList, err := models.GetAllFollowByUserId(userId)\n\tif err != nil {\n\t\tresp[\"status_code\"] = 1\n\t\tresp[\"status_msg\"] = err.Error()\n\t\t_ = c.JSONResp(resp)\n\t\treturn\n\t}\n\n\tresp[\"status_code\"] = 0\n\tresp[\"status_msg\"] = \"成功！\"\n\tresp[\"user_list\"] = followList\n\t_ = c.JSONResp(resp)\n\n}\n\nfunc (c *FollowController) ListFollowerRelation() {\n\n}\n\nfunc (c *FollowController) ListFriendRelation() {\n\n}\n\n//// URLMapping ...\n//func (c *FollowController) URLMapping() {\n//\tc.Mapping(\"Post\", c.Post)\n//\tc.Mapping(\"GetOne\", c.GetOne)\n//\tc.Mapping(\"GetAll\", c.GetAll)\n//\tc.Mapping(\"Put\", c.Put)\n//\tc.Mapping(\"Delete\", c.Delete)\n//}\n//\n//// Post ...\n//// @Title Post\n//// @Description create Follow\n//// @Param\tbody\t\tbody \tmodels.Follow\ttrue\t\t\"body for Follow content\"\n//// @Success 201 {int} models.Follow\n//// @Failure 403 body is empty\n//// @router / [post]\n//func (c *FollowController) Post() {\n//\tvar v models.Follow\n//\tif err := json.Unmarshal(c.Ctx.Input.RequestBody, &v); err == nil {\n//\t\tif _, err := models.AddFollow(&v); err == nil {\n//\t\t\tc.Ctx.Output.SetStatus(201)\n//\t\t\tc.Data[\"json\"] = v\n//\t\t} else {\n//\t\t\tc.Data[\"json\"] = err.Error()\n//\t\t}\n//\t} else {\n//\t\tc.Data[\"json\"] = err.Error()\n//\t}\n//\tc.ServeJSON()\n//}\n//\n//// GetOne ...\n//// @Title Get One\n//// @Description get Follow by id\n//// @Param\tid\t\tpath \tstring\ttrue\t\t\"The key for staticblock\"\n//// @Success 200 {object} models.Follow\n//// @Failure 403 :id is empty\n//// @router /:id [get]\n//func (c *FollowController) GetOne() {\n//\tidStr := c.Ctx.Input.Param(\":id\")\n//\tid, _ := strconv.Atoi(idStr)\n//\tv, err := models.GetFollowById(id)\n//\tif err != nil {\n//\t\tc.Data[\"json\"] = err.Error()\n//\t} else {\n//\t\tc.Data[\"json\"] = v\n//\t}\n//\tc.ServeJSON()\n//}\n//\n//// GetAll ...\n//// @Title Get All\n//// @Description get Follow\n//// @Param\tquery\tquery\tstring\tfalse\t\"Filter. e.g. col1:v1,col2:v2 ...\"\n//// @Param\tfields\tquery\tstring\tfalse\t\"Fields returned. e.g. col1,col2 ...\"\n//// @Param\tsortby\tquery\tstring\tfalse\t\"Sorted-by fields. e.g. col1,col2 ...\"\n//// @Param\torder\tquery\tstring\tfalse\t\"Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...\"\n//// @Param\tlimit\tquery\tstring\tfalse\t\"Limit the size of result set. Must be an integer\"\n//// @Param\toffset\tquery\tstring\tfalse\t\"Start position of result set. Must be an integer\"\n//// @Success 200 {object} models.Follow\n//// @Failure 403\n//// @router / [get]\n//func (c *FollowController) GetAll() {\n//\tvar fields []string\n//\tvar sortby []string\n//\tvar order []string\n//\tvar query = make(map[string]string)\n//\tvar limit int64 = 10\n//\tvar offset int64\n//\n//\t// fields: col1,col2,entity.col3\n//\tif v := c.GetString(\"fields\"); v != \"\" {\n//\t\tfields = strings.Split(v, \",\")\n//\t}\n//\t// limit: 10 (default is 10)\n//\tif v, err := c.GetInt64(\"limit\"); err == nil {\n//\t\tlimit = v\n//\t}\n//\t// offset: 0 (default is 0)\n//\tif v, err := c.GetInt64(\"offset\"); err == nil {\n//\t\toffset = v\n//\t}\n//\t// sortby: col1,col2\n//\tif v := c.GetString(\"sortby\"); v != \"\" {\n//\t\tsortby = strings.Split(v, \",\")\n//\t}\n//\t// order: desc,asc\n//\tif v := c.GetString(\"order\"); v != \"\" {\n//\t\torder = strings.Split(v, \",\")\n//\t}\n//\t// query: k:v,k:v\n//\tif v := c.GetString(\"query\"); v != \"\" {\n//\t\tfor _, cond := range strings.Split(v, \",\") {\n//\t\t\tkv := strings.SplitN(cond, \":\", 2)\n//\t\t\tif len(kv) != 2 {\n//\t\t\t\tc.Data[\"json\"] = errors.New(\"Error: invalid query key/value pair\")\n//\t\t\t\tc.ServeJSON()\n//\t\t\t\treturn\n//\t\t\t}\n//\t\t\tk, v := kv[0], kv[1]\n//\t\t\tquery[k] = v\n//\t\t}\n//\t}\n//\n//\tl, err := models.GetAllFollow(query, fields, sortby, order, offset, limit)\n//\tif err != nil {\n//\t\tc.Data[\"json\"] = err.Error()\n//\t} else {\n//\t\tc.Data[\"json\"] = l\n//\t}\n//\tc.ServeJSON()\n//}\n//\n//// Put ...\n//// @Title Put\n//// @Description update the Follow\n//// @Param\tid\t\tpath \tstring\ttrue\t\t\"The id you want to update\"\n//// @Param\tbody\t\tbody \tmodels.Follow\ttrue\t\t\"body for Follow content\"\n//// @Success 200 {object} models.Follow\n//// @Failure 403 :id is not int\n//// @router /:id [put]\n//func (c *FollowController) Put() {\n//\tidStr := c.Ctx.Input.Param(\":id\")\n//\tid, _ := strconv.Atoi(idStr)\n//\tv := models.Follow{Id: id}\n//\tif err := json.Unmarshal(c.Ctx.Input.RequestBody, &v); err == nil {\n//\t\tif err := models.UpdateFollowById(&v); err == nil {\n//\t\t\tc.Data[\"json\"] = \"OK\"\n//\t\t} else {\n//\t\t\tc.Data[\"json\"] = err.Error()\n//\t\t}\n//\t} else {\n//\t\tc.Data[\"json\"] = err.Error()\n//\t}\n//\tc.ServeJSON()\n//}\n//\n//// Delete ...\n//// @Title Delete\n//// @Description delete the Follow\n//// @Param\tid\t\tpath \tstring\ttrue\t\t\"The id you want to delete\"\n//// @Success 200 {string} delete success!\n//// @Failure 403 id is empty\n//// @router /:id [delete]\n//func (c *FollowController) Delete() {\n//\tidStr := c.Ctx.Input.Param(\":id\")\n//\tid, _ := strconv.Atoi(idStr)\n//\tif err := models.DeleteFollow(id); err == nil {\n//\t\tc.Data[\"json\"] = \"OK\"\n//\t} else {\n//\t\tc.Data[\"json\"] = err.Error()\n//\t}\n//\tc.ServeJSON()\n//}\n
===================================================================
diff --git a/controllers/followController.go b/controllers/followController.go
--- a/controllers/followController.go	
+++ b/controllers/followController.go	
@@ -81,158 +81,3 @@
 func (c *FollowController) ListFriendRelation() {
 
 }
-
-//// URLMapping ...
-//func (c *FollowController) URLMapping() {
-//	c.Mapping("Post", c.Post)
-//	c.Mapping("GetOne", c.GetOne)
-//	c.Mapping("GetAll", c.GetAll)
-//	c.Mapping("Put", c.Put)
-//	c.Mapping("Delete", c.Delete)
-//}
-//
-//// Post ...
-//// @Title Post
-//// @Description create Follow
-//// @Param	body		body 	models.Follow	true		"body for Follow content"
-//// @Success 201 {int} models.Follow
-//// @Failure 403 body is empty
-//// @router / [post]
-//func (c *FollowController) Post() {
-//	var v models.Follow
-//	if err := json.Unmarshal(c.Ctx.Input.RequestBody, &v); err == nil {
-//		if _, err := models.AddFollow(&v); err == nil {
-//			c.Ctx.Output.SetStatus(201)
-//			c.Data["json"] = v
-//		} else {
-//			c.Data["json"] = err.Error()
-//		}
-//	} else {
-//		c.Data["json"] = err.Error()
-//	}
-//	c.ServeJSON()
-//}
-//
-//// GetOne ...
-//// @Title Get One
-//// @Description get Follow by id
-//// @Param	id		path 	string	true		"The key for staticblock"
-//// @Success 200 {object} models.Follow
-//// @Failure 403 :id is empty
-//// @router /:id [get]
-//func (c *FollowController) GetOne() {
-//	idStr := c.Ctx.Input.Param(":id")
-//	id, _ := strconv.Atoi(idStr)
-//	v, err := models.GetFollowById(id)
-//	if err != nil {
-//		c.Data["json"] = err.Error()
-//	} else {
-//		c.Data["json"] = v
-//	}
-//	c.ServeJSON()
-//}
-//
-//// GetAll ...
-//// @Title Get All
-//// @Description get Follow
-//// @Param	query	query	string	false	"Filter. e.g. col1:v1,col2:v2 ..."
-//// @Param	fields	query	string	false	"Fields returned. e.g. col1,col2 ..."
-//// @Param	sortby	query	string	false	"Sorted-by fields. e.g. col1,col2 ..."
-//// @Param	order	query	string	false	"Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ..."
-//// @Param	limit	query	string	false	"Limit the size of result set. Must be an integer"
-//// @Param	offset	query	string	false	"Start position of result set. Must be an integer"
-//// @Success 200 {object} models.Follow
-//// @Failure 403
-//// @router / [get]
-//func (c *FollowController) GetAll() {
-//	var fields []string
-//	var sortby []string
-//	var order []string
-//	var query = make(map[string]string)
-//	var limit int64 = 10
-//	var offset int64
-//
-//	// fields: col1,col2,entity.col3
-//	if v := c.GetString("fields"); v != "" {
-//		fields = strings.Split(v, ",")
-//	}
-//	// limit: 10 (default is 10)
-//	if v, err := c.GetInt64("limit"); err == nil {
-//		limit = v
-//	}
-//	// offset: 0 (default is 0)
-//	if v, err := c.GetInt64("offset"); err == nil {
-//		offset = v
-//	}
-//	// sortby: col1,col2
-//	if v := c.GetString("sortby"); v != "" {
-//		sortby = strings.Split(v, ",")
-//	}
-//	// order: desc,asc
-//	if v := c.GetString("order"); v != "" {
-//		order = strings.Split(v, ",")
-//	}
-//	// query: k:v,k:v
-//	if v := c.GetString("query"); v != "" {
-//		for _, cond := range strings.Split(v, ",") {
-//			kv := strings.SplitN(cond, ":", 2)
-//			if len(kv) != 2 {
-//				c.Data["json"] = errors.New("Error: invalid query key/value pair")
-//				c.ServeJSON()
-//				return
-//			}
-//			k, v := kv[0], kv[1]
-//			query[k] = v
-//		}
-//	}
-//
-//	l, err := models.GetAllFollow(query, fields, sortby, order, offset, limit)
-//	if err != nil {
-//		c.Data["json"] = err.Error()
-//	} else {
-//		c.Data["json"] = l
-//	}
-//	c.ServeJSON()
-//}
-//
-//// Put ...
-//// @Title Put
-//// @Description update the Follow
-//// @Param	id		path 	string	true		"The id you want to update"
-//// @Param	body		body 	models.Follow	true		"body for Follow content"
-//// @Success 200 {object} models.Follow
-//// @Failure 403 :id is not int
-//// @router /:id [put]
-//func (c *FollowController) Put() {
-//	idStr := c.Ctx.Input.Param(":id")
-//	id, _ := strconv.Atoi(idStr)
-//	v := models.Follow{Id: id}
-//	if err := json.Unmarshal(c.Ctx.Input.RequestBody, &v); err == nil {
-//		if err := models.UpdateFollowById(&v); err == nil {
-//			c.Data["json"] = "OK"
-//		} else {
-//			c.Data["json"] = err.Error()
-//		}
-//	} else {
-//		c.Data["json"] = err.Error()
-//	}
-//	c.ServeJSON()
-//}
-//
-//// Delete ...
-//// @Title Delete
-//// @Description delete the Follow
-//// @Param	id		path 	string	true		"The id you want to delete"
-//// @Success 200 {string} delete success!
-//// @Failure 403 id is empty
-//// @router /:id [delete]
-//func (c *FollowController) Delete() {
-//	idStr := c.Ctx.Input.Param(":id")
-//	id, _ := strconv.Atoi(idStr)
-//	if err := models.DeleteFollow(id); err == nil {
-//		c.Data["json"] = "OK"
-//	} else {
-//		c.Data["json"] = err.Error()
-//	}
-//	c.ServeJSON()
-//}
