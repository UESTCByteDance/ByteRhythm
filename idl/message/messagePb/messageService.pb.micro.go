// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: messageService.proto

package messagePb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MessageService service

func NewMessageServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MessageService service

type MessageService interface {
	ChatMessage(ctx context.Context, in *MessageChatRequest, opts ...client.CallOption) (*MessageChatResponse, error)
	ActionMessage(ctx context.Context, in *MessageActionRequest, opts ...client.CallOption) (*MessageActionResponse, error)
}

type messageService struct {
	c    client.Client
	name string
}

func NewMessageService(name string, c client.Client) MessageService {
	return &messageService{
		c:    c,
		name: name,
	}
}

func (c *messageService) ChatMessage(ctx context.Context, in *MessageChatRequest, opts ...client.CallOption) (*MessageChatResponse, error) {
	req := c.c.NewRequest(c.name, "MessageService.ChatMessage", in)
	out := new(MessageChatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) ActionMessage(ctx context.Context, in *MessageActionRequest, opts ...client.CallOption) (*MessageActionResponse, error) {
	req := c.c.NewRequest(c.name, "MessageService.ActionMessage", in)
	out := new(MessageActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageService service

type MessageServiceHandler interface {
	ChatMessage(context.Context, *MessageChatRequest, *MessageChatResponse) error
	ActionMessage(context.Context, *MessageActionRequest, *MessageActionResponse) error
}

func RegisterMessageServiceHandler(s server.Server, hdlr MessageServiceHandler, opts ...server.HandlerOption) error {
	type messageService interface {
		ChatMessage(ctx context.Context, in *MessageChatRequest, out *MessageChatResponse) error
		ActionMessage(ctx context.Context, in *MessageActionRequest, out *MessageActionResponse) error
	}
	type MessageService struct {
		messageService
	}
	h := &messageServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MessageService{h}, opts...))
}

type messageServiceHandler struct {
	MessageServiceHandler
}

func (h *messageServiceHandler) ChatMessage(ctx context.Context, in *MessageChatRequest, out *MessageChatResponse) error {
	return h.MessageServiceHandler.ChatMessage(ctx, in, out)
}

func (h *messageServiceHandler) ActionMessage(ctx context.Context, in *MessageActionRequest, out *MessageActionResponse) error {
	return h.MessageServiceHandler.ActionMessage(ctx, in, out)
}
