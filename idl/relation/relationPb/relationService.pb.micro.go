// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: relationService.proto

package relationPb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RelationService service

func NewRelationServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RelationService service

type RelationService interface {
	ActionRelation(ctx context.Context, in *RelationActionRequest, opts ...client.CallOption) (*RelationActionResponse, error)
	ListFollowRelation(ctx context.Context, in *RelationFollowRequest, opts ...client.CallOption) (*RelationFollowResponse, error)
	ListFollowerRelation(ctx context.Context, in *RelationFollowerRequest, opts ...client.CallOption) (*RelationFollowerResponse, error)
	ListFriendRelation(ctx context.Context, in *RelationFriendRequest, opts ...client.CallOption) (*RelationFriendResponse, error)
}

type relationService struct {
	c    client.Client
	name string
}

func NewRelationService(name string, c client.Client) RelationService {
	return &relationService{
		c:    c,
		name: name,
	}
}

func (c *relationService) ActionRelation(ctx context.Context, in *RelationActionRequest, opts ...client.CallOption) (*RelationActionResponse, error) {
	req := c.c.NewRequest(c.name, "RelationService.ActionRelation", in)
	out := new(RelationActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) ListFollowRelation(ctx context.Context, in *RelationFollowRequest, opts ...client.CallOption) (*RelationFollowResponse, error) {
	req := c.c.NewRequest(c.name, "RelationService.ListFollowRelation", in)
	out := new(RelationFollowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) ListFollowerRelation(ctx context.Context, in *RelationFollowerRequest, opts ...client.CallOption) (*RelationFollowerResponse, error) {
	req := c.c.NewRequest(c.name, "RelationService.ListFollowerRelation", in)
	out := new(RelationFollowerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) ListFriendRelation(ctx context.Context, in *RelationFriendRequest, opts ...client.CallOption) (*RelationFriendResponse, error) {
	req := c.c.NewRequest(c.name, "RelationService.ListFriendRelation", in)
	out := new(RelationFriendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RelationService service

type RelationServiceHandler interface {
	ActionRelation(context.Context, *RelationActionRequest, *RelationActionResponse) error
	ListFollowRelation(context.Context, *RelationFollowRequest, *RelationFollowResponse) error
	ListFollowerRelation(context.Context, *RelationFollowerRequest, *RelationFollowerResponse) error
	ListFriendRelation(context.Context, *RelationFriendRequest, *RelationFriendResponse) error
}

func RegisterRelationServiceHandler(s server.Server, hdlr RelationServiceHandler, opts ...server.HandlerOption) error {
	type relationService interface {
		ActionRelation(ctx context.Context, in *RelationActionRequest, out *RelationActionResponse) error
		ListFollowRelation(ctx context.Context, in *RelationFollowRequest, out *RelationFollowResponse) error
		ListFollowerRelation(ctx context.Context, in *RelationFollowerRequest, out *RelationFollowerResponse) error
		ListFriendRelation(ctx context.Context, in *RelationFriendRequest, out *RelationFriendResponse) error
	}
	type RelationService struct {
		relationService
	}
	h := &relationServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RelationService{h}, opts...))
}

type relationServiceHandler struct {
	RelationServiceHandler
}

func (h *relationServiceHandler) ActionRelation(ctx context.Context, in *RelationActionRequest, out *RelationActionResponse) error {
	return h.RelationServiceHandler.ActionRelation(ctx, in, out)
}

func (h *relationServiceHandler) ListFollowRelation(ctx context.Context, in *RelationFollowRequest, out *RelationFollowResponse) error {
	return h.RelationServiceHandler.ListFollowRelation(ctx, in, out)
}

func (h *relationServiceHandler) ListFollowerRelation(ctx context.Context, in *RelationFollowerRequest, out *RelationFollowerResponse) error {
	return h.RelationServiceHandler.ListFollowerRelation(ctx, in, out)
}

func (h *relationServiceHandler) ListFriendRelation(ctx context.Context, in *RelationFriendRequest, out *RelationFriendResponse) error {
	return h.RelationServiceHandler.ListFriendRelation(ctx, in, out)
}
